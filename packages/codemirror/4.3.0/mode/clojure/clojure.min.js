(function(a){if(typeof exports=="object"&&typeof module=="object"){a(require("../../lib/codemirror"))}else{if(typeof define=="function"&&define.amd){define(["../../lib/codemirror"],a)}else{a(CodeMirror)}}})(function(a){a.defineMode("clojure",function(b){var q="builtin",t="comment",m="string",d="string-2",i="atom",p="number",k="bracket",l="keyword";var r=b.indentUnit||2;var f=b.indentUnit||2;function w(A){var y={},z=A.split(" ");for(var x=0;x<z.length;++x){y[z[x]]=true}return y}var c=w("true false nil");var j=w("defn defn- def def- defonce defmulti defmethod defmacro defstruct deftype defprotocol defrecord defproject deftest slice defalias defhinted defmacro- defn-memo defnk defnk defonce- defunbound defunbound- defvar defvar- let letfn do case cond condp for loop recur when when-not when-let when-first if if-let if-not . .. -> ->> doto and or dosync doseq dotimes dorun doall load import unimport ns in-ns refer try catch finally throw with-open with-local-vars binding gen-class gen-and-load-class gen-and-save-class handler-case handle");var g=w("* *' *1 *2 *3 *agent* *allow-unresolved-vars* *assert* *clojure-version* *command-line-args* *compile-files* *compile-path* *compiler-options* *data-readers* *e *err* *file* *flush-on-newline* *fn-loader* *in* *math-context* *ns* *out* *print-dup* *print-length* *print-level* *print-meta* *print-readably* *read-eval* *source-path* *unchecked-math* *use-context-classloader* *verbose-defrecords* *warn-on-reflection* + +' - -' -> ->> ->ArrayChunk ->Vec ->VecNode ->VecSeq -cache-protocol-fn -reset-methods .. / < <= = == > >= EMPTY-NODE accessor aclone add-classpath add-watch agent agent-error agent-errors aget alength alias all-ns alter alter-meta! alter-var-root amap ancestors and apply areduce array-map aset aset-boolean aset-byte aset-char aset-double aset-float aset-int aset-long aset-short assert assoc assoc! assoc-in associative? atom await await-for await1 bases bean bigdec bigint biginteger binding bit-and bit-and-not bit-clear bit-flip bit-not bit-or bit-set bit-shift-left bit-shift-right bit-test bit-xor boolean boolean-array booleans bound-fn bound-fn* bound? butlast byte byte-array bytes case cast char char-array char-escape-string char-name-string char? chars chunk chunk-append chunk-buffer chunk-cons chunk-first chunk-next chunk-rest chunked-seq? class class? clear-agent-errors clojure-version coll? comment commute comp comparator compare compare-and-set! compile complement concat cond condp conj conj! cons constantly construct-proxy contains? count counted? create-ns create-struct cycle dec dec' decimal? declare default-data-readers definline definterface defmacro defmethod defmulti defn defn- defonce defprotocol defrecord defstruct deftype delay delay? deliver denominator deref derive descendants destructure disj disj! dissoc dissoc! distinct distinct? doall dorun doseq dosync dotimes doto double double-array doubles drop drop-last drop-while empty empty? ensure enumeration-seq error-handler error-mode eval even? every-pred every? ex-data ex-info extend extend-protocol extend-type extenders extends? false? ffirst file-seq filter filterv find find-keyword find-ns find-protocol-impl find-protocol-method find-var first flatten float float-array float? floats flush fn fn? fnext fnil for force format frequencies future future-call future-cancel future-cancelled? future-done? future? gen-class gen-interface gensym get get-in get-method get-proxy-class get-thread-bindings get-validator group-by hash hash-combine hash-map hash-set identical? identity if-let if-not ifn? import in-ns inc inc' init-proxy instance? int int-array integer? interleave intern interpose into into-array ints io! isa? iterate iterator-seq juxt keep keep-indexed key keys keyword keyword? last lazy-cat lazy-seq let letfn line-seq list list* list? load load-file load-reader load-string loaded-libs locking long long-array longs loop macroexpand macroexpand-1 make-array make-hierarchy map map-indexed map? mapcat mapv max max-key memfn memoize merge merge-with meta method-sig methods min min-key mod munge name namespace namespace-munge neg? newline next nfirst nil? nnext not not-any? not-empty not-every? not= ns ns-aliases ns-imports ns-interns ns-map ns-name ns-publics ns-refers ns-resolve ns-unalias ns-unmap nth nthnext nthrest num number? numerator object-array odd? or parents partial partition partition-all partition-by pcalls peek persistent! pmap pop pop! pop-thread-bindings pos? pr pr-str prefer-method prefers primitives-classnames print print-ctor print-dup print-method print-simple print-str printf println println-str prn prn-str promise proxy proxy-call-with-super proxy-mappings proxy-name proxy-super push-thread-bindings pvalues quot rand rand-int rand-nth range ratio? rational? rationalize re-find re-groups re-matcher re-matches re-pattern re-seq read read-line read-string realized? reduce reduce-kv reductions ref ref-history-count ref-max-history ref-min-history ref-set refer refer-clojure reify release-pending-sends rem remove remove-all-methods remove-method remove-ns remove-watch repeat repeatedly replace replicate require reset! reset-meta! resolve rest restart-agent resultset-seq reverse reversible? rseq rsubseq satisfies? second select-keys send send-off seq seq? seque sequence sequential? set set-error-handler! set-error-mode! set-validator! set? short short-array shorts shuffle shutdown-agents slurp some some-fn sort sort-by sorted-map sorted-map-by sorted-set sorted-set-by sorted? special-symbol? spit split-at split-with str string? struct struct-map subs subseq subvec supers swap! symbol symbol? sync take take-last take-nth take-while test the-ns thread-bound? time to-array to-array-2d trampoline transient tree-seq true? type unchecked-add unchecked-add-int unchecked-byte unchecked-char unchecked-dec unchecked-dec-int unchecked-divide-int unchecked-double unchecked-float unchecked-inc unchecked-inc-int unchecked-int unchecked-long unchecked-multiply unchecked-multiply-int unchecked-negate unchecked-negate-int unchecked-remainder-int unchecked-short unchecked-subtract unchecked-subtract-int underive unquote unquote-splicing update-in update-proxy use val vals var-get var-set var? vary-meta vec vector vector-of vector? when when-first when-let when-not while with-bindings with-bindings* with-in-str with-loading-context with-local-vars with-meta with-open with-out-str with-precision with-redefs with-redefs-fn xml-seq zero? zipmap *default-data-reader-fn* as-> cond-> cond->> reduced reduced? send-via set-agent-send-executor! set-agent-send-off-executor! some-> some->>");var s=w("ns fn def defn defmethod bound-fn if if-not case condp when while when-not when-first do future comment doto locking proxy with-open with-precision reify deftype defrecord defprotocol extend extend-protocol extend-type try catch let letfn binding loop for doseq dotimes when-let if-let defstruct struct-map assoc testing deftest handler-case handle dotrace deftrace");var h={digit:/\d/,digit_or_colon:/[\d:]/,hex:/[0-9a-f]/i,sign:/[+-]/,exponent:/e/i,keyword_char:/[^\s\(\[\;\)\]]/,symbol:/[\w*+!\-\._?:<>\/]/};function e(x,y,z){this.indent=x;this.type=y;this.prev=z}function u(z,x,y){z.indentStack=new e(x,y,z.indentStack)}function o(x){x.indentStack=x.indentStack.prev}function n(x,y){if(x==="0"&&y.eat(/x/i)){y.eatWhile(h.hex);return true}if((x=="+"||x=="-")&&(h.digit.test(y.peek()))){y.eat(h.sign);x=y.next()}if(h.digit.test(x)){y.eat(x);y.eatWhile(h.digit);if("."==y.peek()){y.eat(".");y.eatWhile(h.digit)}if(y.eat(h.exponent)){y.eat(h.sign);y.eatWhile(h.digit)}return true}return false}function v(y){var x=y.next();if(x.match(/[a-z]/)&&y.match(/[a-z]+/,true)){return}if(x==="u"){y.match(/[0-9a-z]{4}/i,true)}}return{startState:function(){return{indentStack:null,indentation:0,mode:false}},token:function(F,z){if(z.indentStack==null&&F.sol()){z.indentation=F.indentation()}if(F.eatSpace()){return null}var D=null;switch(z.mode){case"string":var B,y=false;while((B=F.next())!=null){if(B=='"'&&!y){z.mode=false;break}y=!y&&B=="\\"}D=m;break;default:var x=F.next();if(x=='"'){z.mode="string";D=m}else{if(x=="\\"){v(F);D=d}else{if(x=="'"&&!(h.digit_or_colon.test(F.peek()))){D=i}else{if(x==";"){F.skipToEnd();D=t}else{if(n(x,F)){D=p}else{if(x=="("||x=="["||x=="{"){var E="",C=F.column(),A;if(x=="("){while((A=F.eat(h.keyword_char))!=null){E+=A}}if(E.length>0&&(s.propertyIsEnumerable(E)||/^(?:def|with)/.test(E))){u(z,C+r,x)}else{F.eatSpace();if(F.eol()||F.peek()==";"){u(z,C+f,x)}else{u(z,C+F.current().length,x)}}F.backUp(F.current().length-1);D=k}else{if(x==")"||x=="]"||x=="}"){D=k;if(z.indentStack!=null&&z.indentStack.type==(x==")"?"(":(x=="]"?"[":"{"))){o(z)}}else{if(x==":"){F.eatWhile(h.symbol);return i}else{F.eatWhile(h.symbol);if(j&&j.propertyIsEnumerable(F.current())){D=l}else{if(g&&g.propertyIsEnumerable(F.current())){D=q}else{if(c&&c.propertyIsEnumerable(F.current())){D=i}else{D=null}}}}}}}}}}}}return D},indent:function(x){if(x.indentStack==null){return x.indentation}return x.indentStack.indent},lineComment:";;"}});a.defineMIME("text/x-clojure","clojure")});