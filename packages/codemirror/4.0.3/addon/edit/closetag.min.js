/**
 * Tag-closer extension for CodeMirror.
 *
 * This extension adds an "autoCloseTags" option that can be set to
 * either true to get the default behavior, or an object to further
 * configure its behavior.
 *
 * These are supported options:
 *
 * `whenClosing` (default true)
 *   Whether to autoclose when the '/' of a closing tag is typed.
 * `whenOpening` (default true)
 *   Whether to autoclose the tag when the final '>' of an opening
 *   tag is typed.
 * `dontCloseTags` (default is empty tags for HTML, none for XML)
 *   An array of tag names that should not be autoclosed.
 * `indentTags` (default is block tags for HTML, none for XML)
 *   An array of tag names that should, when opened, cause a
 *   blank line to be added inside the tag, and the blank line and
 *   closing line to be indented.
 *
 * See demos/closetag.html for a usage example.
 */(function(e){typeof exports=="object"&&typeof module=="object"?e(require("../../lib/codemirror"),require("../fold/xml-fold")):typeof define=="function"&&define.amd?define(["../../lib/codemirror","../fold/xml-fold"],e):e(CodeMirror)})(function(e){function r(r){if(r.getOption("disableInput"))return e.Pass;var i=r.listSelections(),o=[];for(var u=0;u<i.length;u++){if(!i[u].empty())return e.Pass;var a=i[u].head,f=r.getTokenAt(a),l=e.innerMode(r.getMode(),f.state),c=l.state;if(l.mode.name!="xml"||!c.tagName)return e.Pass;var h=r.getOption("autoCloseTags"),p=l.mode.configuration=="html",d=typeof h=="object"&&h.dontCloseTags||p&&t,v=typeof h=="object"&&h.indentTags||p&&n,m=c.tagName;f.end>a.ch&&(m=m.slice(0,m.length-f.end+a.ch));var g=m.toLowerCase();if(!m||f.type=="string"&&(f.end!=a.ch||!/[\"\']/.test(f.string.charAt(f.string.length-1))||f.string.length==1)||f.type=="tag"&&c.type=="closeTag"||f.string.indexOf("/")==f.string.length-1||d&&s(d,g)>-1||e.scanForClosingTag&&e.scanForClosingTag(r,a,m,Math.min(r.lastLine()+1,a.line+50)))return e.Pass;var y=v&&s(v,g)>-1;o[u]={indent:y,text:">"+(y?"\n\n":"")+"</"+m+">",newPos:y?e.Pos(a.line+1,0):e.Pos(a.line,a.ch+1)}}for(var u=i.length-1;u>=0;u--){var b=o[u];r.replaceRange(b.text,i[u].head,i[u].anchor,"+insert");var w=r.listSelections().slice(0);w[u]={head:b.newPos,anchor:b.newPos},r.setSelections(w),b.indent&&(r.indentLine(b.newPos.line,null,!0),r.indentLine(b.newPos.line+1,null,!0))}}function i(t){if(t.getOption("disableInput"))return e.Pass;var n=t.listSelections(),r=[];for(var i=0;i<n.length;i++){if(!n[i].empty())return e.Pass;var s=n[i].head,o=t.getTokenAt(s),u=e.innerMode(t.getMode(),o.state),a=u.state;if(o.type=="string"||o.string.charAt(0)!="<"||o.start!=s.ch-1||u.mode.name!="xml"||!a.context||!a.context.tagName)return e.Pass;r[i]="/"+a.context.tagName+">"}t.replaceSelections(r)}function s(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0,r=e.length;n<r;++n)if(e[n]==t)return n;return-1}e.defineOption("autoCloseTags",!1,function(t,n,s){s!=e.Init&&s&&t.removeKeyMap("autoCloseTags");if(!n)return;var o={name:"autoCloseTags"};if(typeof n!="object"||n.whenClosing)o["'/'"]=function(e){return i(e)};if(typeof n!="object"||n.whenOpening)o["'>'"]=function(e){return r(e)};t.addKeyMap(o)});var t=["area","base","br","col","command","embed","hr","img","input","keygen","link","meta","param","source","track","wbr"],n=["applet","blockquote","body","button","div","dl","fieldset","form","frameset","h1","h2","h3","h4","h5","h6","head","html","iframe","layer","legend","object","ol","p","select","table","ul"]});