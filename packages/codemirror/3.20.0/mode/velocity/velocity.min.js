CodeMirror.defineMode("velocity",function(){function e(e){var t={},n=e.split(" ");for(var r=0;r<n.length;++r)t[n[r]]=!0;return t}function s(e,t,n){return t.tokenize=n,n(e,t)}function o(e,o){var l=o.beforeParams;o.beforeParams=!1;var c=e.next();if(c=="'"&&o.inParams)return o.lastTokenWasBuiltin=!1,s(e,o,u(c));if(c!='"'){if(/[\[\]{}\(\),;\.]/.test(c))return c=="("&&l?o.inParams=!0:c==")"&&(o.inParams=!1,o.lastTokenWasBuiltin=!0),null;if(/\d/.test(c))return o.lastTokenWasBuiltin=!1,e.eatWhile(/[\w\.]/),"number";if(c=="#"&&e.eat("*"))return o.lastTokenWasBuiltin=!1,s(e,o,a);if(c=="#"&&e.match(/ *\[ *\[/))return o.lastTokenWasBuiltin=!1,s(e,o,f);if(c=="#"&&e.eat("#"))return o.lastTokenWasBuiltin=!1,e.skipToEnd(),"comment";if(c=="$")return e.eatWhile(/[\w\d\$_\.{}]/),r&&r.propertyIsEnumerable(e.current())?"keyword":(o.lastTokenWasBuiltin=!0,o.beforeParams=!0,"builtin");if(i.test(c))return o.lastTokenWasBuiltin=!1,e.eatWhile(i),"operator";e.eatWhile(/[\w\$_{}@]/);var h=e.current();return t&&t.propertyIsEnumerable(h)?"keyword":n&&n.propertyIsEnumerable(h)||e.current().match(/^#@?[a-z0-9_]+ *$/i)&&e.peek()=="("&&(!n||!n.propertyIsEnumerable(h.toLowerCase()))?(o.beforeParams=!0,o.lastTokenWasBuiltin=!1,"keyword"):o.inString?(o.lastTokenWasBuiltin=!1,"string"):e.pos>h.length&&e.string.charAt(e.pos-h.length-1)=="."&&o.lastTokenWasBuiltin?"builtin":(o.lastTokenWasBuiltin=!1,null)}o.lastTokenWasBuiltin=!1;if(o.inString)return o.inString=!1,"string";if(o.inParams)return s(e,o,u(c))}function u(e){return function(t,n){var r=!1,i,s=!1;while((i=t.next())!=null){if(i==e&&!r){s=!0;break}if(e=='"'&&t.peek()=="$"&&!r){n.inString=!0,s=!0;break}r=!r&&i=="\\"}return s&&(n.tokenize=o),"string"}}function a(e,t){var n=!1,r;while(r=e.next()){if(r=="#"&&n){t.tokenize=o;break}n=r=="*"}return"comment"}function f(e,t){var n=0,r;while(r=e.next()){if(r=="#"&&n==2){t.tokenize=o;break}r=="]"?n++:r!=" "&&(n=0)}return"meta"}var t=e("#end #else #break #stop #[[ #]] #{end} #{else} #{break} #{stop}"),n=e("#if #elseif #foreach #set #include #parse #macro #define #evaluate #{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}"),r=e("$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent"),i=/[+\-*&%=<>!?:\/|]/;return{startState:function(){return{tokenize:o,beforeParams:!1,inParams:!1,inString:!1,lastTokenWasBuiltin:!1}},token:function(e,t){return e.eatSpace()?null:t.tokenize(e,t)},blockCommentStart:"#*",blockCommentEnd:"*#",lineComment:"##",fold:"velocity"}}),CodeMirror.defineMIME("text/velocity","velocity");